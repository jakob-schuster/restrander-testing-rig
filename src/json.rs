use std::{fs::File, path::Path, io::Write, fmt::format};

use itertools::{iproduct, Itertools};
use serde_json::{Value, json, error};

use crate::{constants, config::{Protocol, self}};

pub type Pipeline = Vec<Method>;

#[derive(Debug, Clone, PartialEq, PartialOrd)]
pub struct Config {
    pipeline: Pipeline,
    exclude_unknowns: bool,
    error_rate: f64
}

impl Config {
    const DEFAULT_ERROR_RATE: f64 = 0.25;
    const DEFAULT_EXCLUDE_UNKNOWNS: bool = false;

    fn default_pipeline(protocol: Protocol) -> Pipeline {
        vec![
            Method::default_poly(),
            Method::Primer(protocol)
        ]
    }

    fn default_config() -> Config {
        Config {
            pipeline: Config::default_pipeline(Protocol::PCB109),
            exclude_unknowns: false,
            error_rate: 0.25
        }
    }

    fn to_json(self) -> Value {
        json!({
            "name": "custom",
            "description": "a custom protocol generated by the testing rig",
            "pipeline": self.pipeline.into_iter()
                .map(|m| {m.to_json()})
                .collect_vec(),
            "silent": false,
            "exclude-unknowns": self.exclude_unknowns,
            "error-rate": self.error_rate
        })
    }

    pub fn to_filename(self) -> String {
        // collect and concatenate all of the pipeline steps into one string
        let pipeline_string = self.pipeline.into_iter()
            .map(|method| {method.to_filename()})
            .fold("".to_string(), |a, b| {format!("{}+{}", a, b)});

        format!("restrander({})_{}_{}.json", pipeline_string, self.exclude_unknowns, self.error_rate)
    }
}

#[derive(Debug, Clone, PartialEq, PartialOrd)]
pub enum Method {
    Poly(u64, u64),
    Primer(Protocol)
}

impl Method {
    fn default_poly() -> Method {
        Method::Poly(10, 200)
    }

    fn default_primer() -> Method {
        Method::Primer(Protocol::PCB109)
    }

    fn to_json(self) -> Value {
        match self {
            Method::Poly(tail_length, search_size) => json!({
                "type": "poly",
                "tail-length": tail_length,
                "search-size": search_size
            }),
            Method::Primer(protocol) => match protocol {
                Protocol::PCB109 => json!({
                    "type": "primer",
                    "tso": "TTTCTGTTGGTGCTGATATTGCTGGG",
                    "rtp": "ACTTGCCTGTCGCTCTATCTTCTTTTTTTTTT",
                    "report-artefacts": true
                }),
                Protocol::PCB111 => json!({
                    "type": "primer",
                    "tso": "TTTCTGTTGGTGCTGATATTGCTTT",
                    "rtp": "CTTGCCTGTCGCTCTATCTTCAGAGGAG",
                    "report-artefacts": true
                })
            }
        }
    }

    fn to_filename(self) -> String {
        match self {
            Method::Poly(tail_length, search_size) => format!("poly_{}_{}", tail_length, search_size),
            Method::Primer(protocol) => match protocol {
                Protocol::PCB109 => "primer_pcb109".to_string(),
                Protocol::PCB111 => "primer_pcb111".to_string(),
            }
        }
    }
}

pub fn make_desired_configs(config_dir: String, protocol: Protocol) {
    // make error rate configs
    let error_rates = vec![0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.65,0.7,0.75,0.8].into_iter()
        .map(|error_rate| {(format!("error-rate-{}.json", error_rate), make_error_rate_config(error_rate, protocol.clone()))});
    // make search size configs
    let search_sizes = vec![200, 400, 1000, 10000].into_iter()
        .map(|search_size| {(format!("search-size-{}.json", search_size), make_search_size_config(search_size, protocol.clone()))});
    // make no poly test
    let no_poly = (format!("no-poly.json"), make_no_poly_config(protocol.clone()));
    
    // make no primer test
    let no_primer = (format!("no-primer.json"), make_no_primer_config());

    // save all the files and collect them
    error_rates
        .chain(search_sizes)
        .chain(vec![no_poly, no_primer].into_iter())
        .map(|(path, config)| save_config(format!("{}/{}", config_dir, path), config))
        .collect_vec();
}

pub fn pcb111_protocol_testing(config_dir: String, protocol: Protocol) {
    // make error rate configs
    let error_rates = vec![0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.65,0.7,0.75,0.8].into_iter()
        .map(|error_rate| {(format!("error-rate-{}.json", error_rate), make_error_rate_config_no_poly(error_rate, protocol.clone()))});

    // save all the files and collect them
    error_rates
        .map(|(path, config)| save_config(format!("{}/{}", config_dir, path), config))
        .collect_vec();
}

fn save_config(path: String, config: Config) -> String {
    // make the file
    File::create(path.clone())
        .expect(format!("Failed to create file {}", path).as_str())
        .write(config.to_json().to_string().as_bytes())
        .expect("Failed to write to file!");

    // return the path
    path
}

fn make_error_rate_config(error_rate: f64, protocol: Protocol) -> Config {
    Config { 
        pipeline: Config::default_pipeline(protocol), 
        exclude_unknowns: Config::DEFAULT_EXCLUDE_UNKNOWNS, 
        error_rate
    }
}

fn make_error_rate_config_no_poly(error_rate: f64, protocol: Protocol) -> Config {
    Config { 
        pipeline: vec![Method::Primer(protocol)], 
        exclude_unknowns: Config::DEFAULT_EXCLUDE_UNKNOWNS, 
        error_rate
    }
}

fn make_search_size_config(search_size: u64, protocol: Protocol) -> Config {
    Config { 
        pipeline: vec![
            Method::Poly(10, search_size),
            Method::Primer(protocol)
        ], 
        exclude_unknowns: Config::DEFAULT_EXCLUDE_UNKNOWNS, 
        error_rate: Config::DEFAULT_ERROR_RATE
    }
}

fn make_no_primer_config() -> Config {
    Config {
        pipeline: vec![
            Method::default_poly()
        ],
        exclude_unknowns: Config::DEFAULT_EXCLUDE_UNKNOWNS,
        error_rate: Config::DEFAULT_ERROR_RATE
    }
}

fn make_no_poly_config(protocol: Protocol) -> Config {
    Config {
        pipeline: vec![
            Method::Primer(protocol)
        ],
        exclude_unknowns: Config::DEFAULT_EXCLUDE_UNKNOWNS,
        error_rate: Config::DEFAULT_ERROR_RATE
    }
}